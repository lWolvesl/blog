<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>剪贴板工具</title>
</head>
<body>
  <div class="clipboard-container">
    <div class="section">
      <h3>获取数据</h3>
      <div class="input-group">
        <input type="text" id="getKey" placeholder="输入键名" />
        <button id="getBtn">获取</button>
      </div>
      <div id="getResult" class="result">
        <textarea id="getValueDisplay" readonly></textarea>
        <button id="copyBtn" style="display:none;">复制到剪贴板</button>
      </div>
    </div>
    <div class="section">
      <h3>存储数据</h3>
      <div class="input-group">
        <input type="text" id="setKey" placeholder="输入键名" />
        <textarea id="setValue" placeholder="输入要存储的内容"></textarea>
        <div class="time-input">
          <label for="expireTime">过期时间（秒）：</label>
          <input type="number" id="expireTime" value="3600" min="1" />
        </div>
        <button id="setBtn">保存</button>
      </div>
      <div id="setResult" class="result"></div>
    </div>
  </div>
  
  <style>
    .clipboard-container {
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      font-family: system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
    }
    
    .section {
      margin-bottom: 30px;
      padding: 20px;
      border-radius: 8px;
      background-color: #f5f5f5;
    }
    
    .input-group {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-bottom: 15px;
    }
    
    input, textarea, button {
      padding: 10px;
      border-radius: 4px;
      border: 1px solid #ddd;
      font-size: 16px;
    }
    
    textarea {
      min-height: 100px;
      resize: vertical;
    }
    
    button {
      background-color: #4a6cf7;
      color: white;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s;
    }
    
    button:hover {
      background-color: #3a5ce5;
    }
    
    .result {
      margin-top: 15px;
    }
    
    #getValueDisplay {
      width: 100%;
      min-height: 100px;
      margin-bottom: 10px;
    }
    
    #copyBtn {
      background-color: #28a745;
    }
    
    #copyBtn:hover {
      background-color: #218838;
    }
    
    .success {
      color: #28a745;
      font-weight: bold;
    }
    
    .error {
      color: #dc3545;
      font-weight: bold;
    }
    
    .time-input {
      display: flex;
      align-items: center;
      gap: 10px;
    }
    
    .time-input label {
      flex-shrink: 0;
    }
    
    .time-input input {
      width: 100px;
    }
  </style>
  
  <script>
    // 后端服务地址配置
    const API_BASE_URL = 'https://cut.wolves.top/api';
    
    // 等待 DOM 加载完成
    document.addEventListener('DOMContentLoaded', () => {
      // DOM 元素
      const elements = {
        set: {
          key: document.getElementById('setKey') as HTMLInputElement,
          value: document.getElementById('setValue') as HTMLTextAreaElement,
          expire: document.getElementById('expireTime') as HTMLInputElement,
          btn: document.getElementById('setBtn') as HTMLButtonElement,
          result: document.getElementById('setResult') as HTMLDivElement
        },
        get: {
          key: document.getElementById('getKey') as HTMLInputElement,
          btn: document.getElementById('getBtn') as HTMLButtonElement,
          display: document.getElementById('getValueDisplay') as HTMLTextAreaElement,
          copyBtn: document.getElementById('copyBtn') as HTMLButtonElement
        }
      };
  
      // 显示错误信息
      const showError = (element: HTMLElement, message: string) => {
        element.innerHTML = `<span class="error">${message}</span>`;
      };
  
      // 显示成功信息
      const showSuccess = (element: HTMLElement, message: string) => {
        element.innerHTML = `<span class="success">${message}</span>`;
      };
  
      // 清空输入框
      const clearInputs = <T extends HTMLInputElement | HTMLTextAreaElement>(...inputs: T[]) => {
        inputs.forEach(input => input.value = '');
      };
  
      // 设置数据
      elements.set.btn.addEventListener('click', async () => {
        const key = elements.set.key.value.trim();
        const value = elements.set.value.value;
        const expireTime = parseInt(elements.set.expire.value) || 3600;
        
        if (!key) {
          showError(elements.set.result, '请输入键名');
          return;
        }
        
        try {
          const formData = new URLSearchParams();
          formData.append('key', key);
          formData.append('value', value);
          formData.append('expire', expireTime.toString());
          
          const response = await fetch(`${API_BASE_URL}/set`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: formData
          });
          
          if (response.ok) {
            const expireTimeInHours = (expireTime / 3600).toFixed(2);
            showSuccess(elements.set.result, `数据保存成功！将在 ${expireTimeInHours} 小时后过期`);
            clearInputs(elements.set.key);
            clearInputs(elements.set.value);
          } else {
            const error = await response.text();
            showError(elements.set.result, `保存失败: ${error}`);
          }
        } catch (error: any) {
          showError(elements.set.result, `请求错误: ${error.message}`);
        }
      });
      
      // 获取数据
      elements.get.btn.addEventListener('click', async () => {
        const key = elements.get.key.value.trim();
        
        if (!key) {
          elements.get.display.value = '';
          elements.get.copyBtn.style.display = 'none';
          return;
        }
        
        try {
          const response = await fetch(`${API_BASE_URL}/get?key=${encodeURIComponent(key)}`);
          
          if (response.ok) {
            const data = await response.text();
            elements.get.display.value = data;
            elements.get.copyBtn.style.display = 'block';
          } else {
            elements.get.display.value = '获取数据失败';
            elements.get.copyBtn.style.display = 'none';
          }
        } catch (error: any) {
          elements.get.display.value = `请求错误: ${error.message}`;
          elements.get.copyBtn.style.display = 'none';
        }
      });
      
      // 复制到剪贴板
      elements.get.copyBtn.addEventListener('click', () => {
        elements.get.display.select();
        document.execCommand('copy');
        
        const originalText = elements.get.copyBtn.textContent || '复制到剪贴板';
        elements.get.copyBtn.textContent = '已复制！';
        
        setTimeout(() => {
          elements.get.copyBtn.textContent = originalText;
        }, 2000);
      });
    });
  </script>
</body>
</html>